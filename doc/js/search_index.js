var search_data = {"index":{"searchIndex":["additionstrategy","context","dbdatasource","dbsourceadapter","datalist","dataliststudentshort","datatable","datatransformerbase","datatransformerjson","datatransformeryaml","filedatasource","filesourceadapter","mainwindow","multiplicationstrategy","object","onlineorderprocessor","orderprocessor","singleton","strategy","student","studentbase","studentinputform","studentinputformcontroller","studentinputformcontrollercreate","studentinputformcontrolleredit","studentlistbase","studentlistjson","studentliststrategy","studentlistyaml","studentrepository","studentshort","studenttest","tabstudents","tabstudentscontroller","add_listener()","add_student()","add_student()","add_student()","add_student()","add_student()","calculate_total_price()","calculate_total_price()","close()","column_names()","column_names()","contact()","contact?()","contact_color()","create()","create()","create()","create_invoice()","data_table()","delete_selected()","email=()","email=()","execute()","execute()","execute()","execute_strategy()","father_name=()","firstevenafternoteven()","firstpositiv()","first_name=()","from_hash()","from_json_str()","from_student()","get_data()","get_data()","get_element()","get_item()","get_k_n_student_short_list()","get_names()","get_selected()","git=()","git=()","git?()","globmax()","globmin()","has_contacts?()","has_git?()","hash_list_to_str()","hash_list_to_str()","hash_list_to_str()","instance()","instance()","last_name=()","last_name_and_initials()","last_name_and_initials()","list_to_str()","list_to_str()","list_to_str()","load_from_file()","make_readonly()","maxandsimpledel_task()","minarr()","multofnotdivisiblebyfive()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nod_task()","notify()","on_create()","on_create()","on_datalist_changed()","on_db_conn_error()","on_view_created()","on_view_created()","on_view_created()","on_view_created()","paginated_short_students()","paginated_short_students()","paginated_short_students()","paginated_short_students()","paternal_name=()","phone=()","phone=()","populate_fields()","prepare_exec()","process_fields()","process_fields()","process_order()","query()","read_from_file()","refresh_data()","remove_listener()","remove_student()","remove_student()","remove_student()","remove_student()","remove_student()","replace_objects()","replace_student()","replace_student()","replace_student()","replace_student()","replace_student()","rotateleftbyonepos()","save_student()","save_to_file()","select()","select_element()","select_products()","select_products()","selected_id()","send_confirmation_email()","set_contacts()","set_value()","set_view()","set_view()","setup()","short_contact()","short_info()","show_modal_add()","show_modal_edit()","show_view()","simple()","sorted()","sorted()","str_to_hash_list()","str_to_hash_list()","str_to_hash_list()","str_to_list()","str_to_list()","str_to_list()","student_by_id()","student_by_id()","student_by_id()","student_by_id()","student_by_id()","student_by_name()","student_count()","student_count()","student_count()","student_count()","student_count()","table_fields()","table_fields()","teardown()","telegram=()","telegram=()","test_student_empty_options()","test_student_has_contacts()","test_student_has_git()","test_student_init_all_params_correct()","test_student_last_name_and_initials()","test_student_set_contacts()","test_student_short_contact()","test_student_valid()","to_2d_array()","to_hash()","to_json_str()","to_s()","to_s()","to_s()","unigelemsandcount()","update_student_count()","valid?()","valid_account?()","valid_email?()","valid_email?()","valid_name?()","valid_name?()","valid_phone?()","valid_phone?()","valid_profile_name?()","validate()","write_to_file()","gemfile","gemfile.lock","array","qa","uml_class_diagram.html","qa","config.example.yaml","config.yaml","001_create_table_student.sql","fill_student.sql","students.json","students.yaml","main.sql"],"longSearchIndex":["additionstrategy","context","dbdatasource","dbsourceadapter","datalist","dataliststudentshort","datatable","datatransformerbase","datatransformerjson","datatransformeryaml","filedatasource","filesourceadapter","mainwindow","multiplicationstrategy","object","onlineorderprocessor","orderprocessor","singleton","strategy","student","studentbase","studentinputform","studentinputformcontroller","studentinputformcontrollercreate","studentinputformcontrolleredit","studentlistbase","studentlistjson","studentliststrategy","studentlistyaml","studentrepository","studentshort","studenttest","tabstudents","tabstudentscontroller","datalist#add_listener()","dbsourceadapter#add_student()","filedatasource#add_student()","filesourceadapter#add_student()","studentlistbase#add_student()","studentrepository#add_student()","onlineorderprocessor#calculate_total_price()","orderprocessor#calculate_total_price()","studentinputform#close()","datalist#column_names()","dataliststudentshort#column_names()","student#contact()","studentshort#contact?()","tabstudents#contact_color()","mainwindow#create()","studentinputform#create()","tabstudents#create()","orderprocessor#create_invoice()","datalist#data_table()","tabstudentscontroller#delete_selected()","student#email=()","studentbase#email=()","additionstrategy#execute()","multiplicationstrategy#execute()","strategy#execute()","context#execute_strategy()","student#father_name=()","object#firstevenafternoteven()","object#firstpositiv()","student#first_name=()","student::from_hash()","student::from_json_str()","studentshort::from_student()","datalist#get_data()","dataliststudentshort#get_data()","datatable#get_element()","datatable#get_item()","studentlistbase#get_k_n_student_short_list()","dataliststudentshort#get_names()","datalist#get_selected()","student#git=()","studentbase#git=()","studentshort#git?()","object#globmax()","object#globmin()","studentbase#has_contacts?()","studentbase#has_git?()","datatransformerbase#hash_list_to_str()","datatransformerjson#hash_list_to_str()","datatransformeryaml#hash_list_to_str()","dbdatasource::instance()","singleton::instance()","student#last_name=()","student#last_name_and_initials()","studentshort#last_name_and_initials()","studentlistjson#list_to_str()","studentliststrategy#list_to_str()","studentlistyaml#list_to_str()","filedatasource#load_from_file()","studentinputform#make_readonly()","object#maxandsimpledel_task()","object#minarr()","object#multofnotdivisiblebyfive()","context::new()","dbdatasource::new()","dbsourceadapter::new()","dataliststudentshort::new()","datatable::new()","filedatasource::new()","filesourceadapter::new()","mainwindow::new()","student::new()","student::new()","studentbase::new()","studentinputform::new()","studentinputformcontroller::new()","studentinputformcontrollercreate::new()","studentinputformcontrolleredit::new()","studentlistbase::new()","studentrepository::new()","studentshort::new()","studentshort::new()","tabstudents::new()","tabstudentscontroller::new()","object#nod_task()","datalist#notify()","studentinputform#on_create()","tabstudents#on_create()","tabstudents#on_datalist_changed()","studentinputformcontroller#on_db_conn_error()","studentinputformcontroller#on_view_created()","studentinputformcontrollercreate#on_view_created()","studentinputformcontrolleredit#on_view_created()","tabstudentscontroller#on_view_created()","dbsourceadapter#paginated_short_students()","filedatasource#paginated_short_students()","filesourceadapter#paginated_short_students()","studentrepository#paginated_short_students()","student#paternal_name=()","student#phone=()","studentbase#phone=()","studentinputformcontrolleredit#populate_fields()","dbdatasource#prepare_exec()","studentinputformcontrollercreate#process_fields()","studentinputformcontrolleredit#process_fields()","orderprocessor#process_order()","dbdatasource#query()","studentlistbase#read_from_file()","tabstudentscontroller#refresh_data()","datalist#remove_listener()","dbsourceadapter#remove_student()","filedatasource#remove_student()","filesourceadapter#remove_student()","studentlistbase#remove_student()","studentrepository#remove_student()","datalist#replace_objects()","dbsourceadapter#replace_student()","filedatasource#replace_student()","filesourceadapter#replace_student()","studentlistbase#replace_student()","studentrepository#replace_student()","object#rotateleftbyonepos()","studentinputformcontroller#save_student()","filedatasource#save_to_file()","datalist#select()","datalist#select_element()","onlineorderprocessor#select_products()","orderprocessor#select_products()","datalist#selected_id()","orderprocessor#send_confirmation_email()","student#set_contacts()","studentinputform#set_value()","studentinputformcontrollercreate#set_view()","studentinputformcontrolleredit#set_view()","studenttest#setup()","studentbase#short_contact()","student#short_info()","tabstudentscontroller#show_modal_add()","tabstudentscontroller#show_modal_edit()","tabstudentscontroller#show_view()","object#simple()","filedatasource#sorted()","studentlistbase#sorted()","datatransformerbase#str_to_hash_list()","datatransformerjson#str_to_hash_list()","datatransformeryaml#str_to_hash_list()","studentlistjson#str_to_list()","studentliststrategy#str_to_list()","studentlistyaml#str_to_list()","dbsourceadapter#student_by_id()","filedatasource#student_by_id()","filesourceadapter#student_by_id()","studentlistbase#student_by_id()","studentrepository#student_by_id()","studentlistbase#student_by_name()","dbsourceadapter#student_count()","filedatasource#student_count()","filesourceadapter#student_count()","studentlistbase#student_count()","studentrepository#student_count()","datalist#table_fields()","dataliststudentshort#table_fields()","studenttest#teardown()","student#telegram=()","studentbase#telegram=()","studenttest#test_student_empty_options()","studenttest#test_student_has_contacts()","studenttest#test_student_has_git()","studenttest#test_student_init_all_params_correct()","studenttest#test_student_last_name_and_initials()","studenttest#test_student_set_contacts()","studenttest#test_student_short_contact()","studenttest#test_student_valid()","datatable#to_2d_array()","student#to_hash()","student#to_json_str()","datatable#to_s()","student#to_s()","studentshort#to_s()","object#unigelemsandcount()","tabstudents#update_student_count()","studentbase#valid?()","student::valid_account?()","student::valid_email?()","studentbase::valid_email?()","student::valid_name?()","studentbase::valid_name?()","student::valid_phone?()","studentbase::valid_phone?()","studentbase::valid_profile_name?()","studentshort#validate()","studentlistbase#write_to_file()","","","","","","","","","","","","",""],"info":[["AdditionStrategy","","AdditionStrategy.html","","<p>Определяем конкретную стратегию для сложения чисел\n"],["Context","","Context.html","","<p>Определяем контекст, который использует стратегии для выполнения определенного алгоритма\n"],["DBDataSource","","DBDataSource.html","",""],["DBSourceAdapter","","DBSourceAdapter.html","",""],["DataList","","DataList.html","",""],["DataListStudentShort","","DataListStudentShort.html","",""],["DataTable","","DataTable.html","",""],["DataTransformerBase","","DataTransformerBase.html","",""],["DataTransformerJSON","","DataTransformerJSON.html","",""],["DataTransformerYAML","","DataTransformerYAML.html","",""],["FileDataSource","","FileDataSource.html","",""],["FileSourceAdapter","","FileSourceAdapter.html","",""],["MainWindow","","MainWindow.html","",""],["MultiplicationStrategy","","MultiplicationStrategy.html","","<p>Определяем конкретную стратегию для умножения чисел\n"],["Object","","Object.html","",""],["OnlineOrderProcessor","","OnlineOrderProcessor.html","",""],["OrderProcessor","","OrderProcessor.html","","<p>Рассмотрим пример. Предположим, у нас есть базовый класс ‘OrderProcessor’, который определяет …\n"],["Singleton","","Singleton.html","",""],["Strategy","","Strategy.html","","<p>Паттерн “Стратегия” (Strategy) относится к поведенческим паттернам проектирования и позволяет …\n"],["Student","","Student.html","",""],["StudentBase","","StudentBase.html","",""],["StudentInputForm","","StudentInputForm.html","",""],["StudentInputFormController","","StudentInputFormController.html","",""],["StudentInputFormControllerCreate","","StudentInputFormControllerCreate.html","",""],["StudentInputFormControllerEdit","","StudentInputFormControllerEdit.html","",""],["StudentListBase","","StudentListBase.html","",""],["StudentListJSON","","StudentListJSON.html","",""],["StudentListStrategy","","StudentListStrategy.html","",""],["StudentListYAML","","StudentListYAML.html","",""],["StudentRepository","","StudentRepository.html","",""],["StudentShort","","StudentShort.html","",""],["StudentTest","","StudentTest.html","",""],["TabStudents","","TabStudents.html","",""],["TabStudentsController","","TabStudentsController.html","",""],["add_listener","DataList","DataList.html#method-i-add_listener","(listener)",""],["add_student","DBSourceAdapter","DBSourceAdapter.html#method-i-add_student","(student)",""],["add_student","FileDataSource","FileDataSource.html#method-i-add_student","(student)",""],["add_student","FileSourceAdapter","FileSourceAdapter.html#method-i-add_student","(student)",""],["add_student","StudentListBase","StudentListBase.html#method-i-add_student","(student)","<p>добавление студента\n"],["add_student","StudentRepository","StudentRepository.html#method-i-add_student","(student)",""],["calculate_total_price","OnlineOrderProcessor","OnlineOrderProcessor.html#method-i-calculate_total_price","()",""],["calculate_total_price","OrderProcessor","OrderProcessor.html#method-i-calculate_total_price","()",""],["close","StudentInputForm","StudentInputForm.html#method-i-close","()",""],["column_names","DataList","DataList.html#method-i-column_names","()","<p>Имена атрибутов объектов по порядку. Переопределить в наследниках\n"],["column_names","DataListStudentShort","DataListStudentShort.html#method-i-column_names","()","<p>Делаем приватный new предка публичным\n"],["contact","Student","Student.html#method-i-contact","()",""],["contact?","StudentShort","StudentShort.html#method-i-contact-3F","()","<p>метод проверяющий наличие контакта\n"],["contact_color","TabStudents","TabStudents.html#method-i-contact_color","(type)",""],["create","MainWindow","MainWindow.html#method-i-create","()",""],["create","StudentInputForm","StudentInputForm.html#method-i-create","()",""],["create","TabStudents","TabStudents.html#method-i-create","()",""],["create_invoice","OrderProcessor","OrderProcessor.html#method-i-create_invoice","()",""],["data_table","DataList","DataList.html#method-i-data_table","()","<p>Получить DataTable со всеми элементами.\n"],["delete_selected","TabStudentsController","TabStudentsController.html#method-i-delete_selected","(current_page, per_page, selected_row)",""],["email=","Student","Student.html#method-i-email-3D","(email)",""],["email=","StudentBase","StudentBase.html#method-i-email-3D","(new_email)",""],["execute","AdditionStrategy","AdditionStrategy.html#method-i-execute","(a, b)",""],["execute","MultiplicationStrategy","MultiplicationStrategy.html#method-i-execute","(a, b)",""],["execute","Strategy","Strategy.html#method-i-execute","(a, b)",""],["execute_strategy","Context","Context.html#method-i-execute_strategy","(a, b)",""],["father_name=","Student","Student.html#method-i-father_name-3D","(new_father_name)",""],["firstEvenAfterNotEven","Object","Object.html#method-i-firstEvenAfterNotEven","(arr)",""],["firstPositiv","Object","Object.html#method-i-firstPositiv","(arr)",""],["first_name=","Student","Student.html#method-i-first_name-3D","(first_name)",""],["from_hash","Student","Student.html#method-c-from_hash","(hash)","<p>Делаем new предка публичным\n"],["from_json_str","Student","Student.html#method-c-from_json_str","(str)","<p>Конструктор из JSON строки\n"],["from_student","StudentShort","StudentShort.html#method-c-from_student","(student)","<p>Конструктор из Student\n"],["get_data","DataList","DataList.html#method-i-get_data","()","<p>применение паттерна\n"],["get_data","DataListStudentShort","DataListStudentShort.html#method-i-get_data","()",""],["get_element","DataTable","DataTable.html#method-i-get_element","(row, col)","<p>получить элемент по номеру\n"],["get_item","DataTable","DataTable.html#method-i-get_item","(row, col)","<p>Получить значение в ячейке [row, col]\n"],["get_k_n_student_short_list","StudentListBase","StudentListBase.html#method-i-get_k_n_student_short_list","(page, count, current_data_list)","<p>Получить список k по счету n  объектов класса Student_short\n"],["get_names","DataListStudentShort","DataListStudentShort.html#method-i-get_names","()",""],["get_selected","DataList","DataList.html#method-i-get_selected","()","<p>def clear_select\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">selected_objects</span> = []\n</pre>\n<p>end\n"],["git=","Student","Student.html#method-i-git-3D","(git)",""],["git=","StudentBase","StudentBase.html#method-i-git-3D","(new_git)",""],["git?","StudentShort","StudentShort.html#method-i-git-3F","()","<p>метод проверяющий наличие гита\n"],["globMax","Object","Object.html#method-i-globMax","(arr, index)","<p>1.51. Для введенного списка построить два списка L1 и L2, где элементы L1 это неповторяющиеся элементы …\n"],["globMin","Object","Object.html#method-i-globMin","(arr, index)",""],["has_contacts?","StudentBase","StudentBase.html#method-i-has_contacts-3F","()","<p>Валидаторы объекта\n"],["has_git?","StudentBase","StudentBase.html#method-i-has_git-3F","()",""],["hash_list_to_str","DataTransformerBase","DataTransformerBase.html#method-i-hash_list_to_str","(hash_list)",""],["hash_list_to_str","DataTransformerJSON","DataTransformerJSON.html#method-i-hash_list_to_str","(hash_list)",""],["hash_list_to_str","DataTransformerYAML","DataTransformerYAML.html#method-i-hash_list_to_str","(hash_list)",""],["instance","DBDataSource","DBDataSource.html#method-c-instance","()",""],["instance","Singleton","Singleton.html#method-c-instance","()","<p>Статический метод, возвращающий единственный экземпляр класса\n"],["last_name=","Student","Student.html#method-i-last_name-3D","(last_name)",""],["last_name_and_initials","Student","Student.html#method-i-last_name_and_initials","()","<p>Фамилия и инициалы\n"],["last_name_and_initials","StudentShort","StudentShort.html#method-i-last_name_and_initials","()","<p>фамилия и инициалы\n"],["list_to_str","StudentListJSON","StudentListJSON.html#method-i-list_to_str","(list)",""],["list_to_str","StudentListStrategy","StudentListStrategy.html#method-i-list_to_str","(list)",""],["list_to_str","StudentListYAML","StudentListYAML.html#method-i-list_to_str","(list)",""],["load_from_file","FileDataSource","FileDataSource.html#method-i-load_from_file","(file_path)",""],["make_readonly","StudentInputForm","StudentInputForm.html#method-i-make_readonly","(*fields)",""],["maxAndSimpleDel_Task","Object","Object.html#method-i-maxAndSimpleDel_Task","(num)","<p>метод 1, найти максимальный простой делитель числа\n"],["minArr","Object","Object.html#method-i-minArr","(arr)",""],["multOfNotDivisibleByFive","Object","Object.html#method-i-multOfNotDivisibleByFive","(num)","<p>метод 2, найти произведение цифр числа, не делящихся на 5\n"],["new","Context","Context.html#method-c-new","(strategy)",""],["new","DBDataSource","DBDataSource.html#method-c-new","()",""],["new","DBSourceAdapter","DBSourceAdapter.html#method-c-new","()",""],["new","DataListStudentShort","DataListStudentShort.html#method-c-new","(objects)",""],["new","DataTable","DataTable.html#method-c-new","(table)",""],["new","FileDataSource","FileDataSource.html#method-c-new","(data_transformer)",""],["new","FileSourceAdapter","FileSourceAdapter.html#method-c-new","(data_transformer, file_path)",""],["new","MainWindow","MainWindow.html#method-c-new","()",""],["new","Student","Student.html#method-c-new","(last_name, id: nil, git: nil, contact: nil, initials:nil )","<p>конструктор, принимающий аргументы класса student\n\n<pre>def initialize(student)\n  @id = student.id\n  @last_name ...</pre>\n"],["new","Student","Student.html#method-c-new","(last_name, first_name, paternal_name, id: nil, git: nil, phone: nil, email: nil, telegram: nil)","<p>конструктор\n"],["new","StudentBase","StudentBase.html#method-c-new","(id: nil, phone: nil, telegram: nil, email: nil, git: nil)","<p>Стандартный конструктор\n"],["new","StudentInputForm","StudentInputForm.html#method-c-new","(controller, existing_student = nil)",""],["new","StudentInputFormController","StudentInputFormController.html#method-c-new","(view, existing_student)",""],["new","StudentInputFormControllerCreate","StudentInputFormControllerCreate.html#method-c-new","(parent_controller)",""],["new","StudentInputFormControllerEdit","StudentInputFormControllerEdit.html#method-c-new","(parent_controller, existing_student_id)",""],["new","StudentListBase","StudentListBase.html#method-c-new","(data_type)","<p>конструктор\n"],["new","StudentRepository","StudentRepository.html#method-c-new","(data_source_adapter)",""],["new","StudentShort","StudentShort.html#method-c-new","(id: nil, phone: nil, telegram: nil, email: nil, git: nil)","<p>Стандартный конструктор\n"],["new","StudentShort","StudentShort.html#method-c-new","(last_name, id: nil, git: nil, contact: nil, initials:nil )","<p>конструктор, принимающий аргументы класса student\n\n<pre>def initialize(student)\n  @id = student.id\n  @last_name ...</pre>\n"],["new","TabStudents","TabStudents.html#method-c-new","()",""],["new","TabStudentsController","TabStudentsController.html#method-c-new","(view)",""],["nod_Task","Object","Object.html#method-i-nod_Task","(num)",""],["notify","DataList","DataList.html#method-i-notify","()",""],["on_create","StudentInputForm","StudentInputForm.html#method-i-on_create","()",""],["on_create","TabStudents","TabStudents.html#method-i-on_create","()",""],["on_datalist_changed","TabStudents","TabStudents.html#method-i-on_datalist_changed","(new_table)","<p>Метод наблюдателя datalist\n"],["on_db_conn_error","StudentInputFormController","StudentInputFormController.html#method-i-on_db_conn_error","()",""],["on_view_created","StudentInputFormController","StudentInputFormController.html#method-i-on_view_created","()",""],["on_view_created","StudentInputFormControllerCreate","StudentInputFormControllerCreate.html#method-i-on_view_created","()",""],["on_view_created","StudentInputFormControllerEdit","StudentInputFormControllerEdit.html#method-i-on_view_created","()",""],["on_view_created","TabStudentsController","TabStudentsController.html#method-i-on_view_created","()",""],["paginated_short_students","DBSourceAdapter","DBSourceAdapter.html#method-i-paginated_short_students","(page, count, existing_data_list = nil)",""],["paginated_short_students","FileDataSource","FileDataSource.html#method-i-paginated_short_students","(page, count, existing_data_list = nil)","<p>Получить page по счету count элементов (страница начинается с 1)\n"],["paginated_short_students","FileSourceAdapter","FileSourceAdapter.html#method-i-paginated_short_students","(page, count, existing_data_list = nil)",""],["paginated_short_students","StudentRepository","StudentRepository.html#method-i-paginated_short_students","(page, count, existing_data_list = nil)","<p>Получить page по счету count элементов (страница начинается с 1)\n"],["paternal_name=","Student","Student.html#method-i-paternal_name-3D","(paternal_name)",""],["phone=","Student","Student.html#method-i-phone-3D","(phone)","<p>сеттер\n"],["phone=","StudentBase","StudentBase.html#method-i-phone-3D","(new_phone)","<p>Сеттеры с валидацией перед присваиванием\n"],["populate_fields","StudentInputFormControllerEdit","StudentInputFormControllerEdit.html#method-i-populate_fields","(student)",""],["prepare_exec","DBDataSource","DBDataSource.html#method-i-prepare_exec","(statement, *params)",""],["process_fields","StudentInputFormControllerCreate","StudentInputFormControllerCreate.html#method-i-process_fields","(fields)",""],["process_fields","StudentInputFormControllerEdit","StudentInputFormControllerEdit.html#method-i-process_fields","(fields)",""],["process_order","OrderProcessor","OrderProcessor.html#method-i-process_order","()",""],["query","DBDataSource","DBDataSource.html#method-i-query","(statement)",""],["read_from_file","StudentListBase","StudentListBase.html#method-i-read_from_file","(file_path)","<p>чтение из файла\n"],["refresh_data","TabStudentsController","TabStudentsController.html#method-i-refresh_data","(page, per_page)",""],["remove_listener","DataList","DataList.html#method-i-remove_listener","(listener)",""],["remove_student","DBSourceAdapter","DBSourceAdapter.html#method-i-remove_student","(student_id)",""],["remove_student","FileDataSource","FileDataSource.html#method-i-remove_student","(student_id)",""],["remove_student","FileSourceAdapter","FileSourceAdapter.html#method-i-remove_student","(student_id)",""],["remove_student","StudentListBase","StudentListBase.html#method-i-remove_student","(student_id)","<p>удалили студента((\n"],["remove_student","StudentRepository","StudentRepository.html#method-i-remove_student","(student_id)",""],["replace_objects","DataList","DataList.html#method-i-replace_objects","(objects)","<p>Добавить элементы в конец списка\n"],["replace_student","DBSourceAdapter","DBSourceAdapter.html#method-i-replace_student","(student_id, student)",""],["replace_student","FileDataSource","FileDataSource.html#method-i-replace_student","(student_id, student)",""],["replace_student","FileSourceAdapter","FileSourceAdapter.html#method-i-replace_student","(student_id, student)",""],["replace_student","StudentListBase","StudentListBase.html#method-i-replace_student","(student_id, student)","<p>заменить студента\n"],["replace_student","StudentRepository","StudentRepository.html#method-i-replace_student","(student_id, student)",""],["rotateLeftByOnePos","Object","Object.html#method-i-rotateLeftByOnePos","(arr)",""],["save_student","StudentInputFormController","StudentInputFormController.html#method-i-save_student","(student)",""],["save_to_file","FileDataSource","FileDataSource.html#method-i-save_to_file","(file_path)",""],["select","DataList","DataList.html#method-i-select","(number)",""],["select_element","DataList","DataList.html#method-i-select_element","(number)","<p>Выбрать элемент по номеру\n"],["select_products","OnlineOrderProcessor","OnlineOrderProcessor.html#method-i-select_products","()",""],["select_products","OrderProcessor","OrderProcessor.html#method-i-select_products","()",""],["selected_id","DataList","DataList.html#method-i-selected_id","()",""],["send_confirmation_email","OrderProcessor","OrderProcessor.html#method-i-send_confirmation_email","()",""],["set_contacts","Student","Student.html#method-i-set_contacts","(contacts)","<p>контакты\n"],["set_value","StudentInputForm","StudentInputForm.html#method-i-set_value","(field, value)",""],["set_view","StudentInputFormControllerCreate","StudentInputFormControllerCreate.html#method-i-set_view","(view)",""],["set_view","StudentInputFormControllerEdit","StudentInputFormControllerEdit.html#method-i-set_view","(view)",""],["setup","StudentTest","StudentTest.html#method-i-setup","()",""],["short_contact","StudentBase","StudentBase.html#method-i-short_contact","()","<p>Краткая информация о первом доступном контакте пользователя\n"],["short_info","Student","Student.html#method-i-short_info","()","<p>краткая информация о студенте\n"],["show_modal_add","TabStudentsController","TabStudentsController.html#method-i-show_modal_add","()",""],["show_modal_edit","TabStudentsController","TabStudentsController.html#method-i-show_modal_edit","(current_page, per_page, selected_row)",""],["show_view","TabStudentsController","TabStudentsController.html#method-i-show_view","()",""],["simple","Object","Object.html#method-i-simple","(num)",""],["sorted","FileDataSource","FileDataSource.html#method-i-sorted","()",""],["sorted","StudentListBase","StudentListBase.html#method-i-sorted","()","<p>сортировка по фамилии и инициалам\n"],["str_to_hash_list","DataTransformerBase","DataTransformerBase.html#method-i-str_to_hash_list","(str)",""],["str_to_hash_list","DataTransformerJSON","DataTransformerJSON.html#method-i-str_to_hash_list","(str)",""],["str_to_hash_list","DataTransformerYAML","DataTransformerYAML.html#method-i-str_to_hash_list","(str)",""],["str_to_list","StudentListJSON","StudentListJSON.html#method-i-str_to_list","(str)",""],["str_to_list","StudentListStrategy","StudentListStrategy.html#method-i-str_to_list","(str)","<p>Шаблон паттерн\n"],["str_to_list","StudentListYAML","StudentListYAML.html#method-i-str_to_list","(str)",""],["student_by_id","DBSourceAdapter","DBSourceAdapter.html#method-i-student_by_id","(student_id)",""],["student_by_id","FileDataSource","FileDataSource.html#method-i-student_by_id","(student_id)",""],["student_by_id","FileSourceAdapter","FileSourceAdapter.html#method-i-student_by_id","(student_id)",""],["student_by_id","StudentListBase","StudentListBase.html#method-i-student_by_id","(student_id)","<p>найти студента по айди\n"],["student_by_id","StudentRepository","StudentRepository.html#method-i-student_by_id","(student_id)",""],["student_by_name","StudentListBase","StudentListBase.html#method-i-student_by_name","(student_name)","<p>найти студента по фамилии и инциалам\n"],["student_count","DBSourceAdapter","DBSourceAdapter.html#method-i-student_count","()",""],["student_count","FileDataSource","FileDataSource.html#method-i-student_count","()",""],["student_count","FileSourceAdapter","FileSourceAdapter.html#method-i-student_count","()",""],["student_count","StudentListBase","StudentListBase.html#method-i-student_count","()","<p>число студентов\n"],["student_count","StudentRepository","StudentRepository.html#method-i-student_count","()",""],["table_fields","DataList","DataList.html#method-i-table_fields","(object)","<p>данный метод необходимо переопределять у наследников\n"],["table_fields","DataListStudentShort","DataListStudentShort.html#method-i-table_fields","(object)","<p>сеттер для массива объектов\n"],["teardown","StudentTest","StudentTest.html#method-i-teardown","()",""],["telegram=","Student","Student.html#method-i-telegram-3D","(telegram)",""],["telegram=","StudentBase","StudentBase.html#method-i-telegram-3D","(new_telegram)",""],["test_student_empty_options","StudentTest","StudentTest.html#method-i-test_student_empty_options","()",""],["test_student_has_contacts","StudentTest","StudentTest.html#method-i-test_student_has_contacts","()",""],["test_student_has_git","StudentTest","StudentTest.html#method-i-test_student_has_git","()",""],["test_student_init_all_params_correct","StudentTest","StudentTest.html#method-i-test_student_init_all_params_correct","()",""],["test_student_last_name_and_initials","StudentTest","StudentTest.html#method-i-test_student_last_name_and_initials","()",""],["test_student_set_contacts","StudentTest","StudentTest.html#method-i-test_student_set_contacts","()",""],["test_student_short_contact","StudentTest","StudentTest.html#method-i-test_student_short_contact","()",""],["test_student_valid","StudentTest","StudentTest.html#method-i-test_student_valid","()",""],["to_2d_array","DataTable","DataTable.html#method-i-to_2d_array","()",""],["to_hash","Student","Student.html#method-i-to_hash","()",""],["to_json_str","Student","Student.html#method-i-to_json_str","()",""],["to_s","DataTable","DataTable.html#method-i-to_s","()",""],["to_s","Student","Student.html#method-i-to_s","()",""],["to_s","StudentShort","StudentShort.html#method-i-to_s","()","<p>метод возвращающий представление объекта в виде строки\n"],["unigElemsAndCount","Object","Object.html#method-i-unigElemsAndCount","(arr)","<p>1.51. Для введенного списка построить два списка L1 и L2, где элементы L1 это неповторяющиеся элементы …\n"],["update_student_count","TabStudents","TabStudents.html#method-i-update_student_count","(new_cnt)",""],["valid?","StudentBase","StudentBase.html#method-i-valid-3F","()",""],["valid_account?","Student","Student.html#method-c-valid_account-3F","(account)","<p>валидатор профиля\n"],["valid_email?","Student","Student.html#method-c-valid_email-3F","(email)","<p>электронная почта\n"],["valid_email?","StudentBase","StudentBase.html#method-c-valid_email-3F","(email)",""],["valid_name?","Student","Student.html#method-c-valid_name-3F","(name)","<p>валидатор имени\n"],["valid_name?","StudentBase","StudentBase.html#method-c-valid_name-3F","(name)","<p>Валидаторы для полей\n"],["valid_phone?","Student","Student.html#method-c-valid_phone-3F","(phone)","<p>валидатор номера телефона\n"],["valid_phone?","StudentBase","StudentBase.html#method-c-valid_phone-3F","(phone)",""],["valid_profile_name?","StudentBase","StudentBase.html#method-c-valid_profile_name-3F","(profile_name)",""],["validate","StudentShort","StudentShort.html#method-i-validate","()",""],["write_to_file","StudentListBase","StudentListBase.html#method-i-write_to_file","(file_path)","<p>запись в файл\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source “rubygems.org”\n<p>gem “mysql2” gem “glimmer-dsl-libui”, …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  array_include_methods (1.4.0)\n  ast (2.4.2)\n  chunky_png (1.4.0) ...</pre>\n"],["array","","LAB1/TASK3/array_txt.html","","<p>-1 2 -3 -5 10 -6\n"],["qa","","LAB2/lab2_fold/qa_txt.html","","<p>TASK1_<em>_</em>Вопросы:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\">#</span>\n<span class=\"ruby-comment\">#     a.</span>\n<span class=\"ruby-comment\">#   Что такое класс, что такое объект, как создать объект класса?</span>\n<span class=\"ruby-comment\">#     b. ...</span>\n</pre>\n"],["uml_class_diagram.html","","LAB2/lab2_fold/uml_class_diagram_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html lang=“en”&gt; &lt;head&gt;\n\n<pre>&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;meta http-equiv=&quot;X-UA-Compatible&quot; ...</pre>\n"],["QA","","LabStudents/QA_txt.html","","<p>a. Какой класс отвечает за работу с MySQL? Как осуществляется работа? b. В каком формате объект указанного …\n"],["config.example.yaml","","LabStudents/db_config/config_example_yaml.html","","<p>host: ‘localhost’ port: 3306 username: ” password: ‘&lt;DB_PASSWORD&gt;’ database: …\n"],["config.yaml","","LabStudents/db_config/config_yaml.html","","<p>host: ‘localhost’ port: 3306 username: ‘root’ password: ‘Fvthbrf123’ database: …\n"],["001_create_table_student.sql","","LabStudents/db_config/migrations/001_create_table_student_sql.html","","<p>create table student (\n\n<pre>id          int auto_increment,\nlast_name   varchar(128) not null,\nfirst_name  ...</pre>\n"],["fill_student.sql","","LabStudents/db_config/mock_data/fill_student_sql.html","","<p>insert into student(last_name, first_name, father_name, phone, telegram, email, git) values\n\n<pre>(&#39;Иванова&#39;, ...</pre>\n"],["students.json","","LabStudents/test_data/students_json.html","","<p>[\n\n<pre>{\n  &quot;last_name&quot;: &quot;Иванов&quot;,\n  &quot;first_name&quot;: &quot;Иван&quot;,\n  &quot;father_name&quot;: &quot;Иванович&quot;,\n  &quot;id&quot;: 1\n},\n{\n  &quot;last_name&quot;: ...</pre>\n"],["students.yaml","","LabStudents/test_data/students_yaml.html","","<p>last_name: Иванов first_name: Иван father_name: Иванович id: 1\n<p>last_name: Сараев first_name: Поджог father_name …\n"],["main.sql","","main_sql.html","","<p>drop database university; create database university; use university;\n<p>create table student (\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">id</span>        <span class=\"ruby-operator\">...</span>\n</pre>\n"]]}}